/*
Please note that it's Function problem i.e.
you need to write your solution in the form Function(s) only.
Driver Code to call/invoke your function would be added by GfG's Online Judge.*/


/* Structure of the linked list node is as */
struct node
{
	int data;
	struct node* next;
};

/* split the nodes of the given list into front and back halves,
     and return the two lists using the reference parameters.*/
void splitList(struct node* source, struct node** frontRef, struct node** backRef)
{
    *frontRef = source;
    if( source==NULL ) {
        return;
    }
    if( source->next == NULL ) {
        *frontRef = source;
    }
    struct node* temp = source;
    int length = 1;
    while( source->next !=NULL ) {
        length++;
        source = source->next;
    }
    int size = length;
    if( length%2 == 1 ) {
        size = length + 1;
    }
    for( int i=0; i<size/2; i++ ) {
        temp = temp->next;
    }
    *backRef = temp->next;
    temp->next = NULL;
    // Code here
}
// merges two sorted list into one big list
struct node* mergeList(struct node* a, struct node* b)
{
    struct node* finalList;
    while( a!=NULL && b!=NULL ) {
        if( a->data < b->data ) {
            finalList->data = a->data;
            finalList->next=NULL;
            a = a->next;
        } else {
            finalList->data = b->data;
            finalList->next=NULL;
            b = b->next;
        }
    }
    if( a !=NULL ) {
        finalList->next = a;
    }
    if( b !=NULL ) {
        finalList->next = b;
    }
    return finalList;
    // Code here
}

void mergeSort(struct node** headRef)
{
    struct node* head = *headRef;
    struct node* a, b;
    if ((head == NULL) || (head->next == NULL))
       return NULL;
    splitList(head, &a, &b); 
    mergeSort(&a);
    mergeSort(&b);
    *headRef = mergeList(a, b);
}

void push( struct node** headRef, int data ) {

}

int main() {
	struct node* head;
	mergeSort( &head );
}
